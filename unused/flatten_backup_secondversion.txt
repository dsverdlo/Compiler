def flatten_instructions(tree, lblmkr):
    
    def insert_before_statement(tree, node):
        if(tree.parent.data == 'STATEMENTS'):
            n = tree.parent.children.index(tree)
            tree.parent.children.insert(n, node)
            node.parent = tree.parent
        else:
            insert_before_statement(tree.parent, node)

    def add_to_declarations(tree, node):
        if(tree.data == 'block'):
            tree.children[0].ins_child(node)
            print "BLOCK: ", tree
        else:
            add_to_declarations(tree.parent, node)


    def flatten_statement(tree): # tree is a statement at first
        for child in tree.children:
            if(type(child) is Node): # foreach Node child
                
                if(child.data == 'block'):
                    for stmt in child.children[1].children:
                        print "** Found a nested stmt: ", stmt
                        flatten_statement(stmt)
                    continue
                
                # We have a node (tree) with a child that is a node (statement)
                # flatten if the statement contains more expressions
                for subchild in child.children:
                    if(type(subchild) is Node):
                        
                        print " ; Flattening subchild: " + str(subchild) + " of node: " + str(child)

                        tmpvar = lblmkr.getTempVar()

                        decl = Node('var')
                        decl.add_child('int') # char??
                        decl.add_child(tmpvar)
                        add_to_declarations(subchild, decl)
                        #print "--", decl.parent
                        
                        assign = Node('assign')
                        assign.add_child(tmpvar)
                        assign.add_child(subchild)
                        insert_before_statement(child, assign) # TODO remove one iteration?
                        #print "--", assign.parent
                        
                        i = child.children.index(subchild)
                        child.children.remove(subchild) # remove child
                        child.children.insert(i, tmpvar) # insert tmp var
                        
                        print "--", subchild
                        
                        flatten_statement(subchild) # iterate to go deeper
            

    if(type(tree) is Node):
        if(tree.data == 'STATEMENTS'):
            for statement in tree.children:
                print "** Found a statement; ", statement
                flatten_statement(statement)
                # return tree # done, no more iterating
        else:
            for child in tree.children:
                flatten_instructions(child, lblmkr) # iterate deeper until stmts or leafs
    else:
        return tree# leaf node, do nothing
    