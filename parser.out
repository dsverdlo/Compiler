Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration program
Rule 2     program -> declaration
Rule 3     declaration -> fun_declaration
Rule 4     declaration -> var_declaration
Rule 5     fun_declaration -> type NAME LPAR formal_pars RPAR block
Rule 6     fun_declaration -> type NAME LPAR RPAR block
Rule 7     formal_pars -> formal_pars COMMA formal_par
Rule 8     formal_pars -> formal_par
Rule 9     formal_par -> type NAME
Rule 10    block -> LBRACE var_declarations statements RBRACE
Rule 11    block -> LBRACE var_declarations RBRACE
Rule 12    var_declarations -> var_declaration var_declarations
Rule 13    var_declarations -> empty
Rule 14    var_declaration -> type NAME SEMICOLON
Rule 15    type -> INT
Rule 16    type -> CHAR
Rule 17    type -> BOOLEAN
Rule 18    type -> type LBRACK exp RBRACK
Rule 19    statements -> statements SEMICOLON statement
Rule 20    statements -> statement
Rule 21    statement -> block
Rule 22    statement -> RETURN exp
Rule 23    statement -> WRITE exp
Rule 24    statement -> READ lexp
Rule 25    statement -> NAME LPAR RPAR
Rule 26    statement -> NAME LPAR pars RPAR
Rule 27    statement -> WHILE LPAR exp RPAR statement
Rule 28    statement -> IF LPAR exp RPAR statement
Rule 29    statement -> IF LPAR exp RPAR statement ELSE statement
Rule 30    statement -> lexp ASSIGN exp
Rule 31    lexp -> var
Rule 32    lexp -> lexp LBRACK exp RBRACK
Rule 33    exp -> lexp
Rule 34    exp -> LENGTH lexp
Rule 35    exp -> unop exp
Rule 36    exp -> LPAR exp RPAR
Rule 37    exp -> exp AND exp
Rule 38    exp -> exp OR exp
Rule 39    exp -> NAME LPAR RPAR
Rule 40    exp -> NAME LPAR pars RPAR
Rule 41    exp -> NUMBER
Rule 42    exp -> QCHAR
Rule 43    exp -> exp MINUS exp
Rule 44    exp -> exp PLUS exp
Rule 45    exp -> exp TIMES exp
Rule 46    exp -> exp DIVIDE exp
Rule 47    exp -> exp EQUAL exp
Rule 48    exp -> exp NEQUAL exp
Rule 49    exp -> exp GREATER exp
Rule 50    exp -> exp LESS exp
Rule 51    exp -> exp GREATEREQ exp
Rule 52    exp -> exp LESSEQ exp
Rule 53    unop -> MINUS
Rule 54    unop -> NOT
Rule 55    pars -> pars COMMA exp
Rule 56    pars -> exp
Rule 57    var -> NAME
Rule 58    exp -> TRUE
Rule 59    exp -> FALSE
Rule 60    empty -> <empty>

Terminals, with rules where they appear

AND                  : 37
ASSIGN               : 30
BOOLEAN              : 17
CHAR                 : 16
COMMA                : 7 55
DIVIDE               : 46
ELSE                 : 29
EQUAL                : 47
FALSE                : 59
GREATER              : 49
GREATEREQ            : 51
IF                   : 28 29
INT                  : 15
LBRACE               : 10 11
LBRACK               : 18 32
LENGTH               : 34
LESS                 : 50
LESSEQ               : 52
LPAR                 : 5 6 25 26 27 28 29 36 39 40
MINUS                : 43 53
NAME                 : 5 6 9 14 25 26 39 40 57
NEQUAL               : 48
NOT                  : 54
NUMBER               : 41
OR                   : 38
PLUS                 : 44
QCHAR                : 42
RBRACE               : 10 11
RBRACK               : 18 32
READ                 : 24
RETURN               : 22
RPAR                 : 5 6 25 26 27 28 29 36 39 40
SEMICOLON            : 14 19
TIMES                : 45
TRUE                 : 58
WHILE                : 27
WRITE                : 23
error                : 

Nonterminals, with rules where they appear

block                : 5 6 21
declaration          : 1 2
empty                : 13
exp                  : 18 22 23 27 28 29 30 32 35 36 37 37 38 38 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 55 56
formal_par           : 7 8
formal_pars          : 5 7
fun_declaration      : 3
lexp                 : 24 30 32 33 34
pars                 : 26 40 55
program              : 1 0
statement            : 19 20 27 28 29 29
statements           : 10 19
type                 : 5 6 9 14 18
unop                 : 35
var                  : 31
var_declaration      : 4 12
var_declarations     : 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration program
    (2) program -> . declaration
    (3) declaration -> . fun_declaration
    (4) declaration -> . var_declaration
    (5) fun_declaration -> . type NAME LPAR formal_pars RPAR block
    (6) fun_declaration -> . type NAME LPAR RPAR block
    (14) var_declaration -> . type NAME SEMICOLON
    (15) type -> . INT
    (16) type -> . CHAR
    (17) type -> . BOOLEAN
    (18) type -> . type LBRACK exp RBRACK

    INT             shift and go to state 3
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 1

    var_declaration                shift and go to state 2
    fun_declaration                shift and go to state 5
    program                        shift and go to state 6
    declaration                    shift and go to state 7
    type                           shift and go to state 8

state 1

    (17) type -> BOOLEAN .

    NAME            reduce using rule 17 (type -> BOOLEAN .)
    LBRACK          reduce using rule 17 (type -> BOOLEAN .)


state 2

    (4) declaration -> var_declaration .

    INT             reduce using rule 4 (declaration -> var_declaration .)
    CHAR            reduce using rule 4 (declaration -> var_declaration .)
    BOOLEAN         reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 3

    (15) type -> INT .

    NAME            reduce using rule 15 (type -> INT .)
    LBRACK          reduce using rule 15 (type -> INT .)


state 4

    (16) type -> CHAR .

    NAME            reduce using rule 16 (type -> CHAR .)
    LBRACK          reduce using rule 16 (type -> CHAR .)


state 5

    (3) declaration -> fun_declaration .

    INT             reduce using rule 3 (declaration -> fun_declaration .)
    CHAR            reduce using rule 3 (declaration -> fun_declaration .)
    BOOLEAN         reduce using rule 3 (declaration -> fun_declaration .)
    $end            reduce using rule 3 (declaration -> fun_declaration .)


state 6

    (0) S' -> program .



state 7

    (1) program -> declaration . program
    (2) program -> declaration .
    (1) program -> . declaration program
    (2) program -> . declaration
    (3) declaration -> . fun_declaration
    (4) declaration -> . var_declaration
    (5) fun_declaration -> . type NAME LPAR formal_pars RPAR block
    (6) fun_declaration -> . type NAME LPAR RPAR block
    (14) var_declaration -> . type NAME SEMICOLON
    (15) type -> . INT
    (16) type -> . CHAR
    (17) type -> . BOOLEAN
    (18) type -> . type LBRACK exp RBRACK

    $end            reduce using rule 2 (program -> declaration .)
    INT             shift and go to state 3
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 1

    var_declaration                shift and go to state 2
    fun_declaration                shift and go to state 5
    program                        shift and go to state 9
    declaration                    shift and go to state 7
    type                           shift and go to state 8

state 8

    (5) fun_declaration -> type . NAME LPAR formal_pars RPAR block
    (6) fun_declaration -> type . NAME LPAR RPAR block
    (14) var_declaration -> type . NAME SEMICOLON
    (18) type -> type . LBRACK exp RBRACK

    NAME            shift and go to state 10
    LBRACK          shift and go to state 11


state 9

    (1) program -> declaration program .

    $end            reduce using rule 1 (program -> declaration program .)


state 10

    (5) fun_declaration -> type NAME . LPAR formal_pars RPAR block
    (6) fun_declaration -> type NAME . LPAR RPAR block
    (14) var_declaration -> type NAME . SEMICOLON

    LPAR            shift and go to state 12
    SEMICOLON       shift and go to state 13


state 11

    (18) type -> type LBRACK . exp RBRACK
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    lexp                           shift and go to state 19
    exp                            shift and go to state 25
    var                            shift and go to state 20

state 12

    (5) fun_declaration -> type NAME LPAR . formal_pars RPAR block
    (6) fun_declaration -> type NAME LPAR . RPAR block
    (7) formal_pars -> . formal_pars COMMA formal_par
    (8) formal_pars -> . formal_par
    (9) formal_par -> . type NAME
    (15) type -> . INT
    (16) type -> . CHAR
    (17) type -> . BOOLEAN
    (18) type -> . type LBRACK exp RBRACK

    RPAR            shift and go to state 27
    INT             shift and go to state 3
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 1

    formal_par                     shift and go to state 28
    type                           shift and go to state 30
    formal_pars                    shift and go to state 29

state 13

    (14) var_declaration -> type NAME SEMICOLON .

    INT             reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    CHAR            reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    BOOLEAN         reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    $end            reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    RBRACE          reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    RETURN          reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    WRITE           reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    READ            reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    NAME            reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    WHILE           reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    IF              reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)
    LBRACE          reduce using rule 14 (var_declaration -> type NAME SEMICOLON .)


state 14

    (35) exp -> unop . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 31

state 15

    (36) exp -> LPAR . exp RPAR
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 32

state 16

    (42) exp -> QCHAR .

    AND             reduce using rule 42 (exp -> QCHAR .)
    OR              reduce using rule 42 (exp -> QCHAR .)
    MINUS           reduce using rule 42 (exp -> QCHAR .)
    PLUS            reduce using rule 42 (exp -> QCHAR .)
    TIMES           reduce using rule 42 (exp -> QCHAR .)
    DIVIDE          reduce using rule 42 (exp -> QCHAR .)
    EQUAL           reduce using rule 42 (exp -> QCHAR .)
    NEQUAL          reduce using rule 42 (exp -> QCHAR .)
    GREATER         reduce using rule 42 (exp -> QCHAR .)
    LESS            reduce using rule 42 (exp -> QCHAR .)
    GREATEREQ       reduce using rule 42 (exp -> QCHAR .)
    LESSEQ          reduce using rule 42 (exp -> QCHAR .)
    RBRACE          reduce using rule 42 (exp -> QCHAR .)
    SEMICOLON       reduce using rule 42 (exp -> QCHAR .)
    ELSE            reduce using rule 42 (exp -> QCHAR .)
    RBRACK          reduce using rule 42 (exp -> QCHAR .)
    RPAR            reduce using rule 42 (exp -> QCHAR .)
    COMMA           reduce using rule 42 (exp -> QCHAR .)


state 17

    (58) exp -> TRUE .

    AND             reduce using rule 58 (exp -> TRUE .)
    OR              reduce using rule 58 (exp -> TRUE .)
    MINUS           reduce using rule 58 (exp -> TRUE .)
    PLUS            reduce using rule 58 (exp -> TRUE .)
    TIMES           reduce using rule 58 (exp -> TRUE .)
    DIVIDE          reduce using rule 58 (exp -> TRUE .)
    EQUAL           reduce using rule 58 (exp -> TRUE .)
    NEQUAL          reduce using rule 58 (exp -> TRUE .)
    GREATER         reduce using rule 58 (exp -> TRUE .)
    LESS            reduce using rule 58 (exp -> TRUE .)
    GREATEREQ       reduce using rule 58 (exp -> TRUE .)
    LESSEQ          reduce using rule 58 (exp -> TRUE .)
    RBRACE          reduce using rule 58 (exp -> TRUE .)
    SEMICOLON       reduce using rule 58 (exp -> TRUE .)
    ELSE            reduce using rule 58 (exp -> TRUE .)
    RBRACK          reduce using rule 58 (exp -> TRUE .)
    RPAR            reduce using rule 58 (exp -> TRUE .)
    COMMA           reduce using rule 58 (exp -> TRUE .)


state 18

    (53) unop -> MINUS .

    LENGTH          reduce using rule 53 (unop -> MINUS .)
    LPAR            reduce using rule 53 (unop -> MINUS .)
    NAME            reduce using rule 53 (unop -> MINUS .)
    NUMBER          reduce using rule 53 (unop -> MINUS .)
    QCHAR           reduce using rule 53 (unop -> MINUS .)
    TRUE            reduce using rule 53 (unop -> MINUS .)
    FALSE           reduce using rule 53 (unop -> MINUS .)
    MINUS           reduce using rule 53 (unop -> MINUS .)
    NOT             reduce using rule 53 (unop -> MINUS .)


state 19

    (33) exp -> lexp .
    (32) lexp -> lexp . LBRACK exp RBRACK

    AND             reduce using rule 33 (exp -> lexp .)
    OR              reduce using rule 33 (exp -> lexp .)
    MINUS           reduce using rule 33 (exp -> lexp .)
    PLUS            reduce using rule 33 (exp -> lexp .)
    TIMES           reduce using rule 33 (exp -> lexp .)
    DIVIDE          reduce using rule 33 (exp -> lexp .)
    EQUAL           reduce using rule 33 (exp -> lexp .)
    NEQUAL          reduce using rule 33 (exp -> lexp .)
    GREATER         reduce using rule 33 (exp -> lexp .)
    LESS            reduce using rule 33 (exp -> lexp .)
    GREATEREQ       reduce using rule 33 (exp -> lexp .)
    LESSEQ          reduce using rule 33 (exp -> lexp .)
    RBRACE          reduce using rule 33 (exp -> lexp .)
    SEMICOLON       reduce using rule 33 (exp -> lexp .)
    ELSE            reduce using rule 33 (exp -> lexp .)
    RBRACK          reduce using rule 33 (exp -> lexp .)
    RPAR            reduce using rule 33 (exp -> lexp .)
    COMMA           reduce using rule 33 (exp -> lexp .)
    LBRACK          shift and go to state 33


state 20

    (31) lexp -> var .

    LBRACK          reduce using rule 31 (lexp -> var .)
    AND             reduce using rule 31 (lexp -> var .)
    OR              reduce using rule 31 (lexp -> var .)
    MINUS           reduce using rule 31 (lexp -> var .)
    PLUS            reduce using rule 31 (lexp -> var .)
    TIMES           reduce using rule 31 (lexp -> var .)
    DIVIDE          reduce using rule 31 (lexp -> var .)
    EQUAL           reduce using rule 31 (lexp -> var .)
    NEQUAL          reduce using rule 31 (lexp -> var .)
    GREATER         reduce using rule 31 (lexp -> var .)
    LESS            reduce using rule 31 (lexp -> var .)
    GREATEREQ       reduce using rule 31 (lexp -> var .)
    LESSEQ          reduce using rule 31 (lexp -> var .)
    RBRACK          reduce using rule 31 (lexp -> var .)
    RPAR            reduce using rule 31 (lexp -> var .)
    COMMA           reduce using rule 31 (lexp -> var .)
    RBRACE          reduce using rule 31 (lexp -> var .)
    SEMICOLON       reduce using rule 31 (lexp -> var .)
    ELSE            reduce using rule 31 (lexp -> var .)
    ASSIGN          reduce using rule 31 (lexp -> var .)


state 21

    (41) exp -> NUMBER .

    AND             reduce using rule 41 (exp -> NUMBER .)
    OR              reduce using rule 41 (exp -> NUMBER .)
    MINUS           reduce using rule 41 (exp -> NUMBER .)
    PLUS            reduce using rule 41 (exp -> NUMBER .)
    TIMES           reduce using rule 41 (exp -> NUMBER .)
    DIVIDE          reduce using rule 41 (exp -> NUMBER .)
    EQUAL           reduce using rule 41 (exp -> NUMBER .)
    NEQUAL          reduce using rule 41 (exp -> NUMBER .)
    GREATER         reduce using rule 41 (exp -> NUMBER .)
    LESS            reduce using rule 41 (exp -> NUMBER .)
    GREATEREQ       reduce using rule 41 (exp -> NUMBER .)
    LESSEQ          reduce using rule 41 (exp -> NUMBER .)
    RBRACE          reduce using rule 41 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 41 (exp -> NUMBER .)
    ELSE            reduce using rule 41 (exp -> NUMBER .)
    RBRACK          reduce using rule 41 (exp -> NUMBER .)
    RPAR            reduce using rule 41 (exp -> NUMBER .)
    COMMA           reduce using rule 41 (exp -> NUMBER .)


state 22

    (59) exp -> FALSE .

    AND             reduce using rule 59 (exp -> FALSE .)
    OR              reduce using rule 59 (exp -> FALSE .)
    MINUS           reduce using rule 59 (exp -> FALSE .)
    PLUS            reduce using rule 59 (exp -> FALSE .)
    TIMES           reduce using rule 59 (exp -> FALSE .)
    DIVIDE          reduce using rule 59 (exp -> FALSE .)
    EQUAL           reduce using rule 59 (exp -> FALSE .)
    NEQUAL          reduce using rule 59 (exp -> FALSE .)
    GREATER         reduce using rule 59 (exp -> FALSE .)
    LESS            reduce using rule 59 (exp -> FALSE .)
    GREATEREQ       reduce using rule 59 (exp -> FALSE .)
    LESSEQ          reduce using rule 59 (exp -> FALSE .)
    RBRACE          reduce using rule 59 (exp -> FALSE .)
    SEMICOLON       reduce using rule 59 (exp -> FALSE .)
    ELSE            reduce using rule 59 (exp -> FALSE .)
    RBRACK          reduce using rule 59 (exp -> FALSE .)
    RPAR            reduce using rule 59 (exp -> FALSE .)
    COMMA           reduce using rule 59 (exp -> FALSE .)


state 23

    (39) exp -> NAME . LPAR RPAR
    (40) exp -> NAME . LPAR pars RPAR
    (57) var -> NAME .

    LPAR            shift and go to state 34
    LBRACK          reduce using rule 57 (var -> NAME .)
    AND             reduce using rule 57 (var -> NAME .)
    OR              reduce using rule 57 (var -> NAME .)
    MINUS           reduce using rule 57 (var -> NAME .)
    PLUS            reduce using rule 57 (var -> NAME .)
    TIMES           reduce using rule 57 (var -> NAME .)
    DIVIDE          reduce using rule 57 (var -> NAME .)
    EQUAL           reduce using rule 57 (var -> NAME .)
    NEQUAL          reduce using rule 57 (var -> NAME .)
    GREATER         reduce using rule 57 (var -> NAME .)
    LESS            reduce using rule 57 (var -> NAME .)
    GREATEREQ       reduce using rule 57 (var -> NAME .)
    LESSEQ          reduce using rule 57 (var -> NAME .)
    RBRACK          reduce using rule 57 (var -> NAME .)
    RPAR            reduce using rule 57 (var -> NAME .)
    COMMA           reduce using rule 57 (var -> NAME .)
    RBRACE          reduce using rule 57 (var -> NAME .)
    SEMICOLON       reduce using rule 57 (var -> NAME .)
    ELSE            reduce using rule 57 (var -> NAME .)


state 24

    (34) exp -> LENGTH . lexp
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (57) var -> . NAME

    NAME            shift and go to state 36

    var                            shift and go to state 20
    lexp                           shift and go to state 35

state 25

    (18) type -> type LBRACK exp . RBRACK
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RBRACK          shift and go to state 41
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 26

    (54) unop -> NOT .

    LENGTH          reduce using rule 54 (unop -> NOT .)
    LPAR            reduce using rule 54 (unop -> NOT .)
    NAME            reduce using rule 54 (unop -> NOT .)
    NUMBER          reduce using rule 54 (unop -> NOT .)
    QCHAR           reduce using rule 54 (unop -> NOT .)
    TRUE            reduce using rule 54 (unop -> NOT .)
    FALSE           reduce using rule 54 (unop -> NOT .)
    MINUS           reduce using rule 54 (unop -> NOT .)
    NOT             reduce using rule 54 (unop -> NOT .)


state 27

    (6) fun_declaration -> type NAME LPAR RPAR . block
    (10) block -> . LBRACE var_declarations statements RBRACE
    (11) block -> . LBRACE var_declarations RBRACE

    LBRACE          shift and go to state 50

    block                          shift and go to state 51

state 28

    (8) formal_pars -> formal_par .

    RPAR            reduce using rule 8 (formal_pars -> formal_par .)
    COMMA           reduce using rule 8 (formal_pars -> formal_par .)


state 29

    (5) fun_declaration -> type NAME LPAR formal_pars . RPAR block
    (7) formal_pars -> formal_pars . COMMA formal_par

    RPAR            shift and go to state 52
    COMMA           shift and go to state 53


state 30

    (9) formal_par -> type . NAME
    (18) type -> type . LBRACK exp RBRACK

    NAME            shift and go to state 54
    LBRACK          shift and go to state 11


state 31

    (35) exp -> unop exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
    RBRACE          reduce using rule 35 (exp -> unop exp .)
    SEMICOLON       reduce using rule 35 (exp -> unop exp .)
    ELSE            reduce using rule 35 (exp -> unop exp .)
    RBRACK          reduce using rule 35 (exp -> unop exp .)
    RPAR            reduce using rule 35 (exp -> unop exp .)
    COMMA           reduce using rule 35 (exp -> unop exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45

  ! AND             [ reduce using rule 35 (exp -> unop exp .) ]
  ! OR              [ reduce using rule 35 (exp -> unop exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> unop exp .) ]
  ! PLUS            [ reduce using rule 35 (exp -> unop exp .) ]
  ! TIMES           [ reduce using rule 35 (exp -> unop exp .) ]
  ! DIVIDE          [ reduce using rule 35 (exp -> unop exp .) ]
  ! EQUAL           [ reduce using rule 35 (exp -> unop exp .) ]
  ! NEQUAL          [ reduce using rule 35 (exp -> unop exp .) ]
  ! GREATER         [ reduce using rule 35 (exp -> unop exp .) ]
  ! LESS            [ reduce using rule 35 (exp -> unop exp .) ]
  ! GREATEREQ       [ reduce using rule 35 (exp -> unop exp .) ]
  ! LESSEQ          [ reduce using rule 35 (exp -> unop exp .) ]


state 32

    (36) exp -> LPAR exp . RPAR
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RPAR            shift and go to state 55
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 33

    (32) lexp -> lexp LBRACK . exp RBRACK
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 56

state 34

    (39) exp -> NAME LPAR . RPAR
    (40) exp -> NAME LPAR . pars RPAR
    (55) pars -> . pars COMMA exp
    (56) pars -> . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    RPAR            shift and go to state 57
    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    pars                           shift and go to state 58
    lexp                           shift and go to state 19
    exp                            shift and go to state 59

state 35

    (34) exp -> LENGTH lexp .
    (32) lexp -> lexp . LBRACK exp RBRACK

    AND             reduce using rule 34 (exp -> LENGTH lexp .)
    OR              reduce using rule 34 (exp -> LENGTH lexp .)
    MINUS           reduce using rule 34 (exp -> LENGTH lexp .)
    PLUS            reduce using rule 34 (exp -> LENGTH lexp .)
    TIMES           reduce using rule 34 (exp -> LENGTH lexp .)
    DIVIDE          reduce using rule 34 (exp -> LENGTH lexp .)
    EQUAL           reduce using rule 34 (exp -> LENGTH lexp .)
    NEQUAL          reduce using rule 34 (exp -> LENGTH lexp .)
    GREATER         reduce using rule 34 (exp -> LENGTH lexp .)
    LESS            reduce using rule 34 (exp -> LENGTH lexp .)
    GREATEREQ       reduce using rule 34 (exp -> LENGTH lexp .)
    LESSEQ          reduce using rule 34 (exp -> LENGTH lexp .)
    RBRACE          reduce using rule 34 (exp -> LENGTH lexp .)
    SEMICOLON       reduce using rule 34 (exp -> LENGTH lexp .)
    ELSE            reduce using rule 34 (exp -> LENGTH lexp .)
    RBRACK          reduce using rule 34 (exp -> LENGTH lexp .)
    RPAR            reduce using rule 34 (exp -> LENGTH lexp .)
    COMMA           reduce using rule 34 (exp -> LENGTH lexp .)
    LBRACK          shift and go to state 33


state 36

    (57) var -> NAME .

    LBRACK          reduce using rule 57 (var -> NAME .)
    RBRACE          reduce using rule 57 (var -> NAME .)
    SEMICOLON       reduce using rule 57 (var -> NAME .)
    ELSE            reduce using rule 57 (var -> NAME .)
    RBRACK          reduce using rule 57 (var -> NAME .)
    AND             reduce using rule 57 (var -> NAME .)
    OR              reduce using rule 57 (var -> NAME .)
    MINUS           reduce using rule 57 (var -> NAME .)
    PLUS            reduce using rule 57 (var -> NAME .)
    TIMES           reduce using rule 57 (var -> NAME .)
    DIVIDE          reduce using rule 57 (var -> NAME .)
    EQUAL           reduce using rule 57 (var -> NAME .)
    NEQUAL          reduce using rule 57 (var -> NAME .)
    GREATER         reduce using rule 57 (var -> NAME .)
    LESS            reduce using rule 57 (var -> NAME .)
    GREATEREQ       reduce using rule 57 (var -> NAME .)
    LESSEQ          reduce using rule 57 (var -> NAME .)
    RPAR            reduce using rule 57 (var -> NAME .)
    COMMA           reduce using rule 57 (var -> NAME .)


state 37

    (37) exp -> exp AND . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 60

state 38

    (46) exp -> exp DIVIDE . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 61

state 39

    (50) exp -> exp LESS . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 62

state 40

    (47) exp -> exp EQUAL . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 63

state 41

    (18) type -> type LBRACK exp RBRACK .

    NAME            reduce using rule 18 (type -> type LBRACK exp RBRACK .)
    LBRACK          reduce using rule 18 (type -> type LBRACK exp RBRACK .)


state 42

    (48) exp -> exp NEQUAL . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 64

state 43

    (43) exp -> exp MINUS . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 65

state 44

    (51) exp -> exp GREATEREQ . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 66

state 45

    (52) exp -> exp LESSEQ . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 67

state 46

    (44) exp -> exp PLUS . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 68

state 47

    (45) exp -> exp TIMES . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 69

state 48

    (38) exp -> exp OR . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 70

state 49

    (49) exp -> exp GREATER . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 71

state 50

    (10) block -> LBRACE . var_declarations statements RBRACE
    (11) block -> LBRACE . var_declarations RBRACE
    (12) var_declarations -> . var_declaration var_declarations
    (13) var_declarations -> . empty
    (14) var_declaration -> . type NAME SEMICOLON
    (60) empty -> .
    (15) type -> . INT
    (16) type -> . CHAR
    (17) type -> . BOOLEAN
    (18) type -> . type LBRACK exp RBRACK

    RBRACE          reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)
    WRITE           reduce using rule 60 (empty -> .)
    READ            reduce using rule 60 (empty -> .)
    NAME            reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    LBRACE          reduce using rule 60 (empty -> .)
    INT             shift and go to state 3
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 1

    var_declaration                shift and go to state 72
    var_declarations               shift and go to state 73
    type                           shift and go to state 74
    empty                          shift and go to state 75

state 51

    (6) fun_declaration -> type NAME LPAR RPAR block .

    INT             reduce using rule 6 (fun_declaration -> type NAME LPAR RPAR block .)
    CHAR            reduce using rule 6 (fun_declaration -> type NAME LPAR RPAR block .)
    BOOLEAN         reduce using rule 6 (fun_declaration -> type NAME LPAR RPAR block .)
    $end            reduce using rule 6 (fun_declaration -> type NAME LPAR RPAR block .)


state 52

    (5) fun_declaration -> type NAME LPAR formal_pars RPAR . block
    (10) block -> . LBRACE var_declarations statements RBRACE
    (11) block -> . LBRACE var_declarations RBRACE

    LBRACE          shift and go to state 50

    block                          shift and go to state 76

state 53

    (7) formal_pars -> formal_pars COMMA . formal_par
    (9) formal_par -> . type NAME
    (15) type -> . INT
    (16) type -> . CHAR
    (17) type -> . BOOLEAN
    (18) type -> . type LBRACK exp RBRACK

    INT             shift and go to state 3
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 1

    formal_par                     shift and go to state 77
    type                           shift and go to state 30

state 54

    (9) formal_par -> type NAME .

    RPAR            reduce using rule 9 (formal_par -> type NAME .)
    COMMA           reduce using rule 9 (formal_par -> type NAME .)


state 55

    (36) exp -> LPAR exp RPAR .

    AND             reduce using rule 36 (exp -> LPAR exp RPAR .)
    OR              reduce using rule 36 (exp -> LPAR exp RPAR .)
    MINUS           reduce using rule 36 (exp -> LPAR exp RPAR .)
    PLUS            reduce using rule 36 (exp -> LPAR exp RPAR .)
    TIMES           reduce using rule 36 (exp -> LPAR exp RPAR .)
    DIVIDE          reduce using rule 36 (exp -> LPAR exp RPAR .)
    EQUAL           reduce using rule 36 (exp -> LPAR exp RPAR .)
    NEQUAL          reduce using rule 36 (exp -> LPAR exp RPAR .)
    GREATER         reduce using rule 36 (exp -> LPAR exp RPAR .)
    LESS            reduce using rule 36 (exp -> LPAR exp RPAR .)
    GREATEREQ       reduce using rule 36 (exp -> LPAR exp RPAR .)
    LESSEQ          reduce using rule 36 (exp -> LPAR exp RPAR .)
    RBRACE          reduce using rule 36 (exp -> LPAR exp RPAR .)
    SEMICOLON       reduce using rule 36 (exp -> LPAR exp RPAR .)
    ELSE            reduce using rule 36 (exp -> LPAR exp RPAR .)
    RBRACK          reduce using rule 36 (exp -> LPAR exp RPAR .)
    RPAR            reduce using rule 36 (exp -> LPAR exp RPAR .)
    COMMA           reduce using rule 36 (exp -> LPAR exp RPAR .)


state 56

    (32) lexp -> lexp LBRACK exp . RBRACK
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RBRACK          shift and go to state 78
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 57

    (39) exp -> NAME LPAR RPAR .

    AND             reduce using rule 39 (exp -> NAME LPAR RPAR .)
    OR              reduce using rule 39 (exp -> NAME LPAR RPAR .)
    MINUS           reduce using rule 39 (exp -> NAME LPAR RPAR .)
    PLUS            reduce using rule 39 (exp -> NAME LPAR RPAR .)
    TIMES           reduce using rule 39 (exp -> NAME LPAR RPAR .)
    DIVIDE          reduce using rule 39 (exp -> NAME LPAR RPAR .)
    EQUAL           reduce using rule 39 (exp -> NAME LPAR RPAR .)
    NEQUAL          reduce using rule 39 (exp -> NAME LPAR RPAR .)
    GREATER         reduce using rule 39 (exp -> NAME LPAR RPAR .)
    LESS            reduce using rule 39 (exp -> NAME LPAR RPAR .)
    GREATEREQ       reduce using rule 39 (exp -> NAME LPAR RPAR .)
    LESSEQ          reduce using rule 39 (exp -> NAME LPAR RPAR .)
    RBRACE          reduce using rule 39 (exp -> NAME LPAR RPAR .)
    SEMICOLON       reduce using rule 39 (exp -> NAME LPAR RPAR .)
    ELSE            reduce using rule 39 (exp -> NAME LPAR RPAR .)
    RBRACK          reduce using rule 39 (exp -> NAME LPAR RPAR .)
    RPAR            reduce using rule 39 (exp -> NAME LPAR RPAR .)
    COMMA           reduce using rule 39 (exp -> NAME LPAR RPAR .)


state 58

    (40) exp -> NAME LPAR pars . RPAR
    (55) pars -> pars . COMMA exp

    RPAR            shift and go to state 79
    COMMA           shift and go to state 80


state 59

    (56) pars -> exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RPAR            reduce using rule 56 (pars -> exp .)
    COMMA           reduce using rule 56 (pars -> exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 60

    (37) exp -> exp AND exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 37 (exp -> exp AND exp .)
    OR              reduce using rule 37 (exp -> exp AND exp .)
    GREATEREQ       reduce using rule 37 (exp -> exp AND exp .)
    LESSEQ          reduce using rule 37 (exp -> exp AND exp .)
    RBRACE          reduce using rule 37 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 37 (exp -> exp AND exp .)
    ELSE            reduce using rule 37 (exp -> exp AND exp .)
    RBRACK          reduce using rule 37 (exp -> exp AND exp .)
    RPAR            reduce using rule 37 (exp -> exp AND exp .)
    COMMA           reduce using rule 37 (exp -> exp AND exp .)
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39

  ! MINUS           [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! TIMES           [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! EQUAL           [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! NEQUAL          [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! GREATER         [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! LESS            [ reduce using rule 37 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 61

    (46) exp -> exp DIVIDE exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 46 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 46 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 46 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 46 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 46 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 46 (exp -> exp DIVIDE exp .)
    EQUAL           reduce using rule 46 (exp -> exp DIVIDE exp .)
    NEQUAL          reduce using rule 46 (exp -> exp DIVIDE exp .)
    GREATER         reduce using rule 46 (exp -> exp DIVIDE exp .)
    LESS            reduce using rule 46 (exp -> exp DIVIDE exp .)
    GREATEREQ       reduce using rule 46 (exp -> exp DIVIDE exp .)
    LESSEQ          reduce using rule 46 (exp -> exp DIVIDE exp .)
    RBRACE          reduce using rule 46 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 46 (exp -> exp DIVIDE exp .)
    ELSE            reduce using rule 46 (exp -> exp DIVIDE exp .)
    RBRACK          reduce using rule 46 (exp -> exp DIVIDE exp .)
    RPAR            reduce using rule 46 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 46 (exp -> exp DIVIDE exp .)

  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 46 ]
  ! TIMES           [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 39 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 62

    (50) exp -> exp LESS exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 50 (exp -> exp LESS exp .)
    OR              reduce using rule 50 (exp -> exp LESS exp .)
    EQUAL           reduce using rule 50 (exp -> exp LESS exp .)
    NEQUAL          reduce using rule 50 (exp -> exp LESS exp .)
    GREATER         reduce using rule 50 (exp -> exp LESS exp .)
    LESS            reduce using rule 50 (exp -> exp LESS exp .)
    GREATEREQ       reduce using rule 50 (exp -> exp LESS exp .)
    LESSEQ          reduce using rule 50 (exp -> exp LESS exp .)
    RBRACE          reduce using rule 50 (exp -> exp LESS exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp LESS exp .)
    ELSE            reduce using rule 50 (exp -> exp LESS exp .)
    RBRACK          reduce using rule 50 (exp -> exp LESS exp .)
    RPAR            reduce using rule 50 (exp -> exp LESS exp .)
    COMMA           reduce using rule 50 (exp -> exp LESS exp .)
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38

  ! MINUS           [ reduce using rule 50 (exp -> exp LESS exp .) ]
  ! PLUS            [ reduce using rule 50 (exp -> exp LESS exp .) ]
  ! TIMES           [ reduce using rule 50 (exp -> exp LESS exp .) ]
  ! DIVIDE          [ reduce using rule 50 (exp -> exp LESS exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 39 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 63

    (47) exp -> exp EQUAL exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 47 (exp -> exp EQUAL exp .)
    OR              reduce using rule 47 (exp -> exp EQUAL exp .)
    EQUAL           reduce using rule 47 (exp -> exp EQUAL exp .)
    NEQUAL          reduce using rule 47 (exp -> exp EQUAL exp .)
    GREATEREQ       reduce using rule 47 (exp -> exp EQUAL exp .)
    LESSEQ          reduce using rule 47 (exp -> exp EQUAL exp .)
    RBRACE          reduce using rule 47 (exp -> exp EQUAL exp .)
    SEMICOLON       reduce using rule 47 (exp -> exp EQUAL exp .)
    ELSE            reduce using rule 47 (exp -> exp EQUAL exp .)
    RBRACK          reduce using rule 47 (exp -> exp EQUAL exp .)
    RPAR            reduce using rule 47 (exp -> exp EQUAL exp .)
    COMMA           reduce using rule 47 (exp -> exp EQUAL exp .)
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    GREATER         shift and go to state 49
    LESS            shift and go to state 39

  ! MINUS           [ reduce using rule 47 (exp -> exp EQUAL exp .) ]
  ! PLUS            [ reduce using rule 47 (exp -> exp EQUAL exp .) ]
  ! TIMES           [ reduce using rule 47 (exp -> exp EQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 47 (exp -> exp EQUAL exp .) ]
  ! GREATER         [ reduce using rule 47 (exp -> exp EQUAL exp .) ]
  ! LESS            [ reduce using rule 47 (exp -> exp EQUAL exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 64

    (48) exp -> exp NEQUAL exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 48 (exp -> exp NEQUAL exp .)
    OR              reduce using rule 48 (exp -> exp NEQUAL exp .)
    EQUAL           reduce using rule 48 (exp -> exp NEQUAL exp .)
    NEQUAL          reduce using rule 48 (exp -> exp NEQUAL exp .)
    GREATEREQ       reduce using rule 48 (exp -> exp NEQUAL exp .)
    LESSEQ          reduce using rule 48 (exp -> exp NEQUAL exp .)
    RBRACE          reduce using rule 48 (exp -> exp NEQUAL exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp NEQUAL exp .)
    ELSE            reduce using rule 48 (exp -> exp NEQUAL exp .)
    RBRACK          reduce using rule 48 (exp -> exp NEQUAL exp .)
    RPAR            reduce using rule 48 (exp -> exp NEQUAL exp .)
    COMMA           reduce using rule 48 (exp -> exp NEQUAL exp .)
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    GREATER         shift and go to state 49
    LESS            shift and go to state 39

  ! MINUS           [ reduce using rule 48 (exp -> exp NEQUAL exp .) ]
  ! PLUS            [ reduce using rule 48 (exp -> exp NEQUAL exp .) ]
  ! TIMES           [ reduce using rule 48 (exp -> exp NEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp NEQUAL exp .) ]
  ! GREATER         [ reduce using rule 48 (exp -> exp NEQUAL exp .) ]
  ! LESS            [ reduce using rule 48 (exp -> exp NEQUAL exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 65

    (43) exp -> exp MINUS exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 43 (exp -> exp MINUS exp .)
    OR              reduce using rule 43 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 43 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 43 (exp -> exp MINUS exp .)
    EQUAL           reduce using rule 43 (exp -> exp MINUS exp .)
    NEQUAL          reduce using rule 43 (exp -> exp MINUS exp .)
    GREATER         reduce using rule 43 (exp -> exp MINUS exp .)
    LESS            reduce using rule 43 (exp -> exp MINUS exp .)
    GREATEREQ       reduce using rule 43 (exp -> exp MINUS exp .)
    LESSEQ          reduce using rule 43 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 43 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 43 (exp -> exp MINUS exp .)
    ELSE            reduce using rule 43 (exp -> exp MINUS exp .)
    RBRACK          reduce using rule 43 (exp -> exp MINUS exp .)
    RPAR            reduce using rule 43 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 43 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38

  ! TIMES           [ reduce using rule 43 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 43 (exp -> exp MINUS exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 39 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 66

    (51) exp -> exp GREATEREQ exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
    RBRACE          reduce using rule 51 (exp -> exp GREATEREQ exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp GREATEREQ exp .)
    ELSE            reduce using rule 51 (exp -> exp GREATEREQ exp .)
    RBRACK          reduce using rule 51 (exp -> exp GREATEREQ exp .)
    RPAR            reduce using rule 51 (exp -> exp GREATEREQ exp .)
    COMMA           reduce using rule 51 (exp -> exp GREATEREQ exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45

  ! AND             [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! OR              [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! PLUS            [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! TIMES           [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! DIVIDE          [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! EQUAL           [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! NEQUAL          [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! GREATER         [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! LESS            [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! GREATEREQ       [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]
  ! LESSEQ          [ reduce using rule 51 (exp -> exp GREATEREQ exp .) ]


state 67

    (52) exp -> exp LESSEQ exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
    RBRACE          reduce using rule 52 (exp -> exp LESSEQ exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp LESSEQ exp .)
    ELSE            reduce using rule 52 (exp -> exp LESSEQ exp .)
    RBRACK          reduce using rule 52 (exp -> exp LESSEQ exp .)
    RPAR            reduce using rule 52 (exp -> exp LESSEQ exp .)
    COMMA           reduce using rule 52 (exp -> exp LESSEQ exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45

  ! AND             [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! OR              [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! MINUS           [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! PLUS            [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! TIMES           [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! DIVIDE          [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! EQUAL           [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! NEQUAL          [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! GREATER         [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! LESS            [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! GREATEREQ       [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]
  ! LESSEQ          [ reduce using rule 52 (exp -> exp LESSEQ exp .) ]


state 68

    (44) exp -> exp PLUS exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 44 (exp -> exp PLUS exp .)
    OR              reduce using rule 44 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 44 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 44 (exp -> exp PLUS exp .)
    EQUAL           reduce using rule 44 (exp -> exp PLUS exp .)
    NEQUAL          reduce using rule 44 (exp -> exp PLUS exp .)
    GREATER         reduce using rule 44 (exp -> exp PLUS exp .)
    LESS            reduce using rule 44 (exp -> exp PLUS exp .)
    GREATEREQ       reduce using rule 44 (exp -> exp PLUS exp .)
    LESSEQ          reduce using rule 44 (exp -> exp PLUS exp .)
    RBRACE          reduce using rule 44 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 44 (exp -> exp PLUS exp .)
    ELSE            reduce using rule 44 (exp -> exp PLUS exp .)
    RBRACK          reduce using rule 44 (exp -> exp PLUS exp .)
    RPAR            reduce using rule 44 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 44 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38

  ! TIMES           [ reduce using rule 44 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 44 (exp -> exp PLUS exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 39 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 69

    (45) exp -> exp TIMES exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 45 (exp -> exp TIMES exp .)
    OR              reduce using rule 45 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 45 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 45 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 45 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 45 (exp -> exp TIMES exp .)
    EQUAL           reduce using rule 45 (exp -> exp TIMES exp .)
    NEQUAL          reduce using rule 45 (exp -> exp TIMES exp .)
    GREATER         reduce using rule 45 (exp -> exp TIMES exp .)
    LESS            reduce using rule 45 (exp -> exp TIMES exp .)
    GREATEREQ       reduce using rule 45 (exp -> exp TIMES exp .)
    LESSEQ          reduce using rule 45 (exp -> exp TIMES exp .)
    RBRACE          reduce using rule 45 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 45 (exp -> exp TIMES exp .)
    ELSE            reduce using rule 45 (exp -> exp TIMES exp .)
    RBRACK          reduce using rule 45 (exp -> exp TIMES exp .)
    RPAR            reduce using rule 45 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 45 (exp -> exp TIMES exp .)

  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 43 ]
  ! PLUS            [ shift and go to state 46 ]
  ! TIMES           [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 38 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 39 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 70

    (38) exp -> exp OR exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 38 (exp -> exp OR exp .)
    OR              reduce using rule 38 (exp -> exp OR exp .)
    GREATEREQ       reduce using rule 38 (exp -> exp OR exp .)
    LESSEQ          reduce using rule 38 (exp -> exp OR exp .)
    RBRACE          reduce using rule 38 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 38 (exp -> exp OR exp .)
    ELSE            reduce using rule 38 (exp -> exp OR exp .)
    RBRACK          reduce using rule 38 (exp -> exp OR exp .)
    RPAR            reduce using rule 38 (exp -> exp OR exp .)
    COMMA           reduce using rule 38 (exp -> exp OR exp .)
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39

  ! MINUS           [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! TIMES           [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! EQUAL           [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! NEQUAL          [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! GREATER         [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! LESS            [ reduce using rule 38 (exp -> exp OR exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 71

    (49) exp -> exp GREATER exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    AND             reduce using rule 49 (exp -> exp GREATER exp .)
    OR              reduce using rule 49 (exp -> exp GREATER exp .)
    EQUAL           reduce using rule 49 (exp -> exp GREATER exp .)
    NEQUAL          reduce using rule 49 (exp -> exp GREATER exp .)
    GREATER         reduce using rule 49 (exp -> exp GREATER exp .)
    LESS            reduce using rule 49 (exp -> exp GREATER exp .)
    GREATEREQ       reduce using rule 49 (exp -> exp GREATER exp .)
    LESSEQ          reduce using rule 49 (exp -> exp GREATER exp .)
    RBRACE          reduce using rule 49 (exp -> exp GREATER exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp GREATER exp .)
    ELSE            reduce using rule 49 (exp -> exp GREATER exp .)
    RBRACK          reduce using rule 49 (exp -> exp GREATER exp .)
    RPAR            reduce using rule 49 (exp -> exp GREATER exp .)
    COMMA           reduce using rule 49 (exp -> exp GREATER exp .)
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38

  ! MINUS           [ reduce using rule 49 (exp -> exp GREATER exp .) ]
  ! PLUS            [ reduce using rule 49 (exp -> exp GREATER exp .) ]
  ! TIMES           [ reduce using rule 49 (exp -> exp GREATER exp .) ]
  ! DIVIDE          [ reduce using rule 49 (exp -> exp GREATER exp .) ]
  ! AND             [ shift and go to state 37 ]
  ! OR              [ shift and go to state 48 ]
  ! EQUAL           [ shift and go to state 40 ]
  ! NEQUAL          [ shift and go to state 42 ]
  ! GREATER         [ shift and go to state 49 ]
  ! LESS            [ shift and go to state 39 ]
  ! GREATEREQ       [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]


state 72

    (12) var_declarations -> var_declaration . var_declarations
    (12) var_declarations -> . var_declaration var_declarations
    (13) var_declarations -> . empty
    (14) var_declaration -> . type NAME SEMICOLON
    (60) empty -> .
    (15) type -> . INT
    (16) type -> . CHAR
    (17) type -> . BOOLEAN
    (18) type -> . type LBRACK exp RBRACK

    RBRACE          reduce using rule 60 (empty -> .)
    RETURN          reduce using rule 60 (empty -> .)
    WRITE           reduce using rule 60 (empty -> .)
    READ            reduce using rule 60 (empty -> .)
    NAME            reduce using rule 60 (empty -> .)
    WHILE           reduce using rule 60 (empty -> .)
    IF              reduce using rule 60 (empty -> .)
    LBRACE          reduce using rule 60 (empty -> .)
    INT             shift and go to state 3
    CHAR            shift and go to state 4
    BOOLEAN         shift and go to state 1

    var_declaration                shift and go to state 72
    type                           shift and go to state 74
    empty                          shift and go to state 75
    var_declarations               shift and go to state 81

state 73

    (10) block -> LBRACE var_declarations . statements RBRACE
    (11) block -> LBRACE var_declarations . RBRACE
    (19) statements -> . statements SEMICOLON statement
    (20) statements -> . statement
    (21) statement -> . block
    (22) statement -> . RETURN exp
    (23) statement -> . WRITE exp
    (24) statement -> . READ lexp
    (25) statement -> . NAME LPAR RPAR
    (26) statement -> . NAME LPAR pars RPAR
    (27) statement -> . WHILE LPAR exp RPAR statement
    (28) statement -> . IF LPAR exp RPAR statement
    (29) statement -> . IF LPAR exp RPAR statement ELSE statement
    (30) statement -> . lexp ASSIGN exp
    (10) block -> . LBRACE var_declarations statements RBRACE
    (11) block -> . LBRACE var_declarations RBRACE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (57) var -> . NAME

    RBRACE          shift and go to state 88
    RETURN          shift and go to state 82
    WRITE           shift and go to state 89
    READ            shift and go to state 83
    NAME            shift and go to state 91
    WHILE           shift and go to state 84
    IF              shift and go to state 90
    LBRACE          shift and go to state 50

    statements                     shift and go to state 85
    statement                      shift and go to state 87
    var                            shift and go to state 20
    block                          shift and go to state 92
    lexp                           shift and go to state 86

state 74

    (14) var_declaration -> type . NAME SEMICOLON
    (18) type -> type . LBRACK exp RBRACK

    NAME            shift and go to state 93
    LBRACK          shift and go to state 11


state 75

    (13) var_declarations -> empty .

    RBRACE          reduce using rule 13 (var_declarations -> empty .)
    RETURN          reduce using rule 13 (var_declarations -> empty .)
    WRITE           reduce using rule 13 (var_declarations -> empty .)
    READ            reduce using rule 13 (var_declarations -> empty .)
    NAME            reduce using rule 13 (var_declarations -> empty .)
    WHILE           reduce using rule 13 (var_declarations -> empty .)
    IF              reduce using rule 13 (var_declarations -> empty .)
    LBRACE          reduce using rule 13 (var_declarations -> empty .)


state 76

    (5) fun_declaration -> type NAME LPAR formal_pars RPAR block .

    INT             reduce using rule 5 (fun_declaration -> type NAME LPAR formal_pars RPAR block .)
    CHAR            reduce using rule 5 (fun_declaration -> type NAME LPAR formal_pars RPAR block .)
    BOOLEAN         reduce using rule 5 (fun_declaration -> type NAME LPAR formal_pars RPAR block .)
    $end            reduce using rule 5 (fun_declaration -> type NAME LPAR formal_pars RPAR block .)


state 77

    (7) formal_pars -> formal_pars COMMA formal_par .

    RPAR            reduce using rule 7 (formal_pars -> formal_pars COMMA formal_par .)
    COMMA           reduce using rule 7 (formal_pars -> formal_pars COMMA formal_par .)


state 78

    (32) lexp -> lexp LBRACK exp RBRACK .

    LBRACK          reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    AND             reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    OR              reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    MINUS           reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    PLUS            reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    TIMES           reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    DIVIDE          reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    EQUAL           reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    NEQUAL          reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    GREATER         reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    LESS            reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    GREATEREQ       reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    LESSEQ          reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    RBRACK          reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    RPAR            reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    COMMA           reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    RBRACE          reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    SEMICOLON       reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    ELSE            reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)
    ASSIGN          reduce using rule 32 (lexp -> lexp LBRACK exp RBRACK .)


state 79

    (40) exp -> NAME LPAR pars RPAR .

    AND             reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    OR              reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    MINUS           reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    PLUS            reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    TIMES           reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    DIVIDE          reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    EQUAL           reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    NEQUAL          reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    GREATER         reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    LESS            reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    GREATEREQ       reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    LESSEQ          reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    RBRACE          reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    SEMICOLON       reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    ELSE            reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    RBRACK          reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    RPAR            reduce using rule 40 (exp -> NAME LPAR pars RPAR .)
    COMMA           reduce using rule 40 (exp -> NAME LPAR pars RPAR .)


state 80

    (55) pars -> pars COMMA . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 94

state 81

    (12) var_declarations -> var_declaration var_declarations .

    RBRACE          reduce using rule 12 (var_declarations -> var_declaration var_declarations .)
    RETURN          reduce using rule 12 (var_declarations -> var_declaration var_declarations .)
    WRITE           reduce using rule 12 (var_declarations -> var_declaration var_declarations .)
    READ            reduce using rule 12 (var_declarations -> var_declaration var_declarations .)
    NAME            reduce using rule 12 (var_declarations -> var_declaration var_declarations .)
    WHILE           reduce using rule 12 (var_declarations -> var_declaration var_declarations .)
    IF              reduce using rule 12 (var_declarations -> var_declaration var_declarations .)
    LBRACE          reduce using rule 12 (var_declarations -> var_declaration var_declarations .)


state 82

    (22) statement -> RETURN . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 95

state 83

    (24) statement -> READ . lexp
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (57) var -> . NAME

    NAME            shift and go to state 36

    var                            shift and go to state 20
    lexp                           shift and go to state 96

state 84

    (27) statement -> WHILE . LPAR exp RPAR statement

    LPAR            shift and go to state 97


state 85

    (10) block -> LBRACE var_declarations statements . RBRACE
    (19) statements -> statements . SEMICOLON statement

    RBRACE          shift and go to state 98
    SEMICOLON       shift and go to state 99


state 86

    (30) statement -> lexp . ASSIGN exp
    (32) lexp -> lexp . LBRACK exp RBRACK

    ASSIGN          shift and go to state 100
    LBRACK          shift and go to state 33


state 87

    (20) statements -> statement .

    RBRACE          reduce using rule 20 (statements -> statement .)
    SEMICOLON       reduce using rule 20 (statements -> statement .)


state 88

    (11) block -> LBRACE var_declarations RBRACE .

    INT             reduce using rule 11 (block -> LBRACE var_declarations RBRACE .)
    CHAR            reduce using rule 11 (block -> LBRACE var_declarations RBRACE .)
    BOOLEAN         reduce using rule 11 (block -> LBRACE var_declarations RBRACE .)
    $end            reduce using rule 11 (block -> LBRACE var_declarations RBRACE .)
    RBRACE          reduce using rule 11 (block -> LBRACE var_declarations RBRACE .)
    SEMICOLON       reduce using rule 11 (block -> LBRACE var_declarations RBRACE .)
    ELSE            reduce using rule 11 (block -> LBRACE var_declarations RBRACE .)


state 89

    (23) statement -> WRITE . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 101

state 90

    (28) statement -> IF . LPAR exp RPAR statement
    (29) statement -> IF . LPAR exp RPAR statement ELSE statement

    LPAR            shift and go to state 102


state 91

    (25) statement -> NAME . LPAR RPAR
    (26) statement -> NAME . LPAR pars RPAR
    (57) var -> NAME .

    LPAR            shift and go to state 103
    ASSIGN          reduce using rule 57 (var -> NAME .)
    LBRACK          reduce using rule 57 (var -> NAME .)


state 92

    (21) statement -> block .

    RBRACE          reduce using rule 21 (statement -> block .)
    SEMICOLON       reduce using rule 21 (statement -> block .)
    ELSE            reduce using rule 21 (statement -> block .)


state 93

    (14) var_declaration -> type NAME . SEMICOLON

    SEMICOLON       shift and go to state 13


state 94

    (55) pars -> pars COMMA exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RPAR            reduce using rule 55 (pars -> pars COMMA exp .)
    COMMA           reduce using rule 55 (pars -> pars COMMA exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 95

    (22) statement -> RETURN exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RBRACE          reduce using rule 22 (statement -> RETURN exp .)
    SEMICOLON       reduce using rule 22 (statement -> RETURN exp .)
    ELSE            reduce using rule 22 (statement -> RETURN exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 96

    (24) statement -> READ lexp .
    (32) lexp -> lexp . LBRACK exp RBRACK

    RBRACE          reduce using rule 24 (statement -> READ lexp .)
    SEMICOLON       reduce using rule 24 (statement -> READ lexp .)
    ELSE            reduce using rule 24 (statement -> READ lexp .)
    LBRACK          shift and go to state 33


state 97

    (27) statement -> WHILE LPAR . exp RPAR statement
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    exp                            shift and go to state 104
    var                            shift and go to state 20
    lexp                           shift and go to state 19

state 98

    (10) block -> LBRACE var_declarations statements RBRACE .

    INT             reduce using rule 10 (block -> LBRACE var_declarations statements RBRACE .)
    CHAR            reduce using rule 10 (block -> LBRACE var_declarations statements RBRACE .)
    BOOLEAN         reduce using rule 10 (block -> LBRACE var_declarations statements RBRACE .)
    $end            reduce using rule 10 (block -> LBRACE var_declarations statements RBRACE .)
    RBRACE          reduce using rule 10 (block -> LBRACE var_declarations statements RBRACE .)
    SEMICOLON       reduce using rule 10 (block -> LBRACE var_declarations statements RBRACE .)
    ELSE            reduce using rule 10 (block -> LBRACE var_declarations statements RBRACE .)


state 99

    (19) statements -> statements SEMICOLON . statement
    (21) statement -> . block
    (22) statement -> . RETURN exp
    (23) statement -> . WRITE exp
    (24) statement -> . READ lexp
    (25) statement -> . NAME LPAR RPAR
    (26) statement -> . NAME LPAR pars RPAR
    (27) statement -> . WHILE LPAR exp RPAR statement
    (28) statement -> . IF LPAR exp RPAR statement
    (29) statement -> . IF LPAR exp RPAR statement ELSE statement
    (30) statement -> . lexp ASSIGN exp
    (10) block -> . LBRACE var_declarations statements RBRACE
    (11) block -> . LBRACE var_declarations RBRACE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (57) var -> . NAME

    RETURN          shift and go to state 82
    WRITE           shift and go to state 89
    READ            shift and go to state 83
    NAME            shift and go to state 91
    WHILE           shift and go to state 84
    IF              shift and go to state 90
    LBRACE          shift and go to state 50

    statement                      shift and go to state 105
    var                            shift and go to state 20
    block                          shift and go to state 92
    lexp                           shift and go to state 86

state 100

    (30) statement -> lexp ASSIGN . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    lexp                           shift and go to state 19
    exp                            shift and go to state 106

state 101

    (23) statement -> WRITE exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RBRACE          reduce using rule 23 (statement -> WRITE exp .)
    SEMICOLON       reduce using rule 23 (statement -> WRITE exp .)
    ELSE            reduce using rule 23 (statement -> WRITE exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 102

    (28) statement -> IF LPAR . exp RPAR statement
    (29) statement -> IF LPAR . exp RPAR statement ELSE statement
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    exp                            shift and go to state 107
    var                            shift and go to state 20
    lexp                           shift and go to state 19

state 103

    (25) statement -> NAME LPAR . RPAR
    (26) statement -> NAME LPAR . pars RPAR
    (55) pars -> . pars COMMA exp
    (56) pars -> . exp
    (33) exp -> . lexp
    (34) exp -> . LENGTH lexp
    (35) exp -> . unop exp
    (36) exp -> . LPAR exp RPAR
    (37) exp -> . exp AND exp
    (38) exp -> . exp OR exp
    (39) exp -> . NAME LPAR RPAR
    (40) exp -> . NAME LPAR pars RPAR
    (41) exp -> . NUMBER
    (42) exp -> . QCHAR
    (43) exp -> . exp MINUS exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp TIMES exp
    (46) exp -> . exp DIVIDE exp
    (47) exp -> . exp EQUAL exp
    (48) exp -> . exp NEQUAL exp
    (49) exp -> . exp GREATER exp
    (50) exp -> . exp LESS exp
    (51) exp -> . exp GREATEREQ exp
    (52) exp -> . exp LESSEQ exp
    (58) exp -> . TRUE
    (59) exp -> . FALSE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (53) unop -> . MINUS
    (54) unop -> . NOT
    (57) var -> . NAME

    RPAR            shift and go to state 108
    LENGTH          shift and go to state 24
    LPAR            shift and go to state 15
    NAME            shift and go to state 23
    NUMBER          shift and go to state 21
    QCHAR           shift and go to state 16
    TRUE            shift and go to state 17
    FALSE           shift and go to state 22
    MINUS           shift and go to state 18
    NOT             shift and go to state 26

    unop                           shift and go to state 14
    var                            shift and go to state 20
    pars                           shift and go to state 109
    lexp                           shift and go to state 19
    exp                            shift and go to state 59

state 104

    (27) statement -> WHILE LPAR exp . RPAR statement
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RPAR            shift and go to state 110
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 105

    (19) statements -> statements SEMICOLON statement .

    RBRACE          reduce using rule 19 (statements -> statements SEMICOLON statement .)
    SEMICOLON       reduce using rule 19 (statements -> statements SEMICOLON statement .)


state 106

    (30) statement -> lexp ASSIGN exp .
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RBRACE          reduce using rule 30 (statement -> lexp ASSIGN exp .)
    SEMICOLON       reduce using rule 30 (statement -> lexp ASSIGN exp .)
    ELSE            reduce using rule 30 (statement -> lexp ASSIGN exp .)
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 107

    (28) statement -> IF LPAR exp . RPAR statement
    (29) statement -> IF LPAR exp . RPAR statement ELSE statement
    (37) exp -> exp . AND exp
    (38) exp -> exp . OR exp
    (43) exp -> exp . MINUS exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . TIMES exp
    (46) exp -> exp . DIVIDE exp
    (47) exp -> exp . EQUAL exp
    (48) exp -> exp . NEQUAL exp
    (49) exp -> exp . GREATER exp
    (50) exp -> exp . LESS exp
    (51) exp -> exp . GREATEREQ exp
    (52) exp -> exp . LESSEQ exp

    RPAR            shift and go to state 111
    AND             shift and go to state 37
    OR              shift and go to state 48
    MINUS           shift and go to state 43
    PLUS            shift and go to state 46
    TIMES           shift and go to state 47
    DIVIDE          shift and go to state 38
    EQUAL           shift and go to state 40
    NEQUAL          shift and go to state 42
    GREATER         shift and go to state 49
    LESS            shift and go to state 39
    GREATEREQ       shift and go to state 44
    LESSEQ          shift and go to state 45


state 108

    (25) statement -> NAME LPAR RPAR .

    RBRACE          reduce using rule 25 (statement -> NAME LPAR RPAR .)
    SEMICOLON       reduce using rule 25 (statement -> NAME LPAR RPAR .)
    ELSE            reduce using rule 25 (statement -> NAME LPAR RPAR .)


state 109

    (26) statement -> NAME LPAR pars . RPAR
    (55) pars -> pars . COMMA exp

    RPAR            shift and go to state 112
    COMMA           shift and go to state 80


state 110

    (27) statement -> WHILE LPAR exp RPAR . statement
    (21) statement -> . block
    (22) statement -> . RETURN exp
    (23) statement -> . WRITE exp
    (24) statement -> . READ lexp
    (25) statement -> . NAME LPAR RPAR
    (26) statement -> . NAME LPAR pars RPAR
    (27) statement -> . WHILE LPAR exp RPAR statement
    (28) statement -> . IF LPAR exp RPAR statement
    (29) statement -> . IF LPAR exp RPAR statement ELSE statement
    (30) statement -> . lexp ASSIGN exp
    (10) block -> . LBRACE var_declarations statements RBRACE
    (11) block -> . LBRACE var_declarations RBRACE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (57) var -> . NAME

    RETURN          shift and go to state 82
    WRITE           shift and go to state 89
    READ            shift and go to state 83
    NAME            shift and go to state 91
    WHILE           shift and go to state 84
    IF              shift and go to state 90
    LBRACE          shift and go to state 50

    statement                      shift and go to state 113
    var                            shift and go to state 20
    block                          shift and go to state 92
    lexp                           shift and go to state 86

state 111

    (28) statement -> IF LPAR exp RPAR . statement
    (29) statement -> IF LPAR exp RPAR . statement ELSE statement
    (21) statement -> . block
    (22) statement -> . RETURN exp
    (23) statement -> . WRITE exp
    (24) statement -> . READ lexp
    (25) statement -> . NAME LPAR RPAR
    (26) statement -> . NAME LPAR pars RPAR
    (27) statement -> . WHILE LPAR exp RPAR statement
    (28) statement -> . IF LPAR exp RPAR statement
    (29) statement -> . IF LPAR exp RPAR statement ELSE statement
    (30) statement -> . lexp ASSIGN exp
    (10) block -> . LBRACE var_declarations statements RBRACE
    (11) block -> . LBRACE var_declarations RBRACE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (57) var -> . NAME

    RETURN          shift and go to state 82
    WRITE           shift and go to state 89
    READ            shift and go to state 83
    NAME            shift and go to state 91
    WHILE           shift and go to state 84
    IF              shift and go to state 90
    LBRACE          shift and go to state 50

    statement                      shift and go to state 114
    var                            shift and go to state 20
    block                          shift and go to state 92
    lexp                           shift and go to state 86

state 112

    (26) statement -> NAME LPAR pars RPAR .

    RBRACE          reduce using rule 26 (statement -> NAME LPAR pars RPAR .)
    SEMICOLON       reduce using rule 26 (statement -> NAME LPAR pars RPAR .)
    ELSE            reduce using rule 26 (statement -> NAME LPAR pars RPAR .)


state 113

    (27) statement -> WHILE LPAR exp RPAR statement .

    RBRACE          reduce using rule 27 (statement -> WHILE LPAR exp RPAR statement .)
    SEMICOLON       reduce using rule 27 (statement -> WHILE LPAR exp RPAR statement .)
    ELSE            reduce using rule 27 (statement -> WHILE LPAR exp RPAR statement .)


state 114

    (28) statement -> IF LPAR exp RPAR statement .
    (29) statement -> IF LPAR exp RPAR statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 28 (statement -> IF LPAR exp RPAR statement .)
    SEMICOLON       reduce using rule 28 (statement -> IF LPAR exp RPAR statement .)
    ELSE            shift and go to state 115

  ! ELSE            [ reduce using rule 28 (statement -> IF LPAR exp RPAR statement .) ]


state 115

    (29) statement -> IF LPAR exp RPAR statement ELSE . statement
    (21) statement -> . block
    (22) statement -> . RETURN exp
    (23) statement -> . WRITE exp
    (24) statement -> . READ lexp
    (25) statement -> . NAME LPAR RPAR
    (26) statement -> . NAME LPAR pars RPAR
    (27) statement -> . WHILE LPAR exp RPAR statement
    (28) statement -> . IF LPAR exp RPAR statement
    (29) statement -> . IF LPAR exp RPAR statement ELSE statement
    (30) statement -> . lexp ASSIGN exp
    (10) block -> . LBRACE var_declarations statements RBRACE
    (11) block -> . LBRACE var_declarations RBRACE
    (31) lexp -> . var
    (32) lexp -> . lexp LBRACK exp RBRACK
    (57) var -> . NAME

    RETURN          shift and go to state 82
    WRITE           shift and go to state 89
    READ            shift and go to state 83
    NAME            shift and go to state 91
    WHILE           shift and go to state 84
    IF              shift and go to state 90
    LBRACE          shift and go to state 50

    statement                      shift and go to state 116
    var                            shift and go to state 20
    block                          shift and go to state 92
    lexp                           shift and go to state 86

state 116

    (29) statement -> IF LPAR exp RPAR statement ELSE statement .

    RBRACE          reduce using rule 29 (statement -> IF LPAR exp RPAR statement ELSE statement .)
    SEMICOLON       reduce using rule 29 (statement -> IF LPAR exp RPAR statement ELSE statement .)
    ELSE            reduce using rule 29 (statement -> IF LPAR exp RPAR statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 31 resolved as shift
WARNING: shift/reduce conflict for OR in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 31 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 31 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 31 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 31 resolved as shift
WARNING: shift/reduce conflict for LESS in state 31 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 31 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 31 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 66 resolved as shift
WARNING: shift/reduce conflict for LESS in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 66 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATEREQ in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 67 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 114 resolved as shift
